# -*- coding: utf-8 -*-
"""phishing.ipynb

Automatically generated by Colaboratory.

Original file is located at
"""
import pickle
import pandas as pd
import numpy
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.feature_extraction.text import TfidfVectorizer

data = pd.read_csv('phishing_site_urls.csv')
print(data.shape)
data.head()


proportions = data['Label'].value_counts(normalize=True)


target_rows_good = int(proportions['good'] * 100000)
target_rows_bad = int(proportions['bad'] * 100000)


good_data = data[data['Label'] == 'good'].sample(target_rows_good)
bad_data = data[data['Label'] == 'bad'].sample(target_rows_bad)


undersampled_data = pd.concat([good_data, bad_data])


data = undersampled_data.sample(frac=1).reset_index(drop=True)

data.info()


encoder = LabelEncoder()
data['Label'] = encoder.fit_transform(data['Label'])

data.head()

data.isnull().sum()

data.duplicated().sum()

data = data.drop_duplicates(keep='first')

data.head()

data.isnull().sum()

data.shape

data['Label'].value_counts()

data.describe()


data.hist(figsize=(20, 20), bins=30)
plt.show()

data


X = data['URL']
y = data['Label']

train_x, test_x, train_y, test_y = train_test_split(
    X, y, test_size=0.2, random_state=42)


vectorizer = TfidfVectorizer()


X_train_tfidf = vectorizer.fit_transform(train_x)
X_test_tfidf = vectorizer.transform(test_x)

clf_svm = svm.SVC(kernel='linear')
clf_svm.fit(X_train_tfidf, train_y)

clf_svm.score(X_test_tfidf, test_y)

# # Save the trained model to a .pkl file
# with open('trained_model.pkl', 'wb') as file:
#     pickle.dump(clf_svm, file)
